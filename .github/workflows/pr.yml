name: pr

on:
  pull_request:
    branches: [ main ]
    paths:
      - "gke/**"
      - ".github/workflows/pr.yml"

env:
  TF_VERSION: 0.12.28

jobs:
  gke:
    name: Speculative run of GKE Beta cluster infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: gke
    strategy:
      matrix:
        projects:
          - name: daveyb
            project_id: daveyb
            tfe_workspace_id: gcp-terraform-gke-beta
            tfe_api_uri: https://app.terraform.io/api/v2/vars
            region: us-east1
            service_account_id_secret_name: DAVEYB_SA
            service_account_credential_secret_name: DAVEYB_SA_CREDENTIALS

    steps:
    - uses: actions/checkout@v2

    - name: Configure ~/.terraformrc
      run: |
        tee ~/.terraformrc <<- EOF
        {
          "credentials": {
            "app.terraform.io": {
              "token": "${{ secrets.TFC_TOKEN }}"
            }
          }
        }
        EOF

    - name: Push GOOGLE_CREDENTIALS to Workspace as secret
      run: |
        curl \
        --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
        --header "Content-Type: application/vns.api+json" \
        --request POST \
        --data <<- EOF
        {
          "data": {
            "type":"vars",
            "attributes": {
              "key":"GOOGLE_CREDENTIALS",
              "value":"${{ secrets[matrix.projects.service_account_credential_secret_name] }}"
              "description":"",
              "category":"terraform",
              "hcl":false,
              "sensitive":true
            },
            "relationships": {
              "workspace": {
                "data": {
                  "id":"${{ matrix.projects.tfe_workspace_id }}",
                  "type":"workspaces"
                }
              }
            }
          }
        }
        EOF \
        ${{ matrix.projects.tfe_api_uri }}
 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.1.0
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init ${{ matrix.projects.name }}
      id: init
      run: terraform init -no-color -input=false
      env:
        TF_VAR_project_id: ${{ matrix.projects.project_id }}
        TF_VAR_region: ${{ matrix.projects.region }}
        TF_VAR_compute_engine_service_account: ${{ secrets[matrix.projects.service_account_id_secret_name] }}

    - name: Run speculative plan on TFC
      id: plan
      run: terraform plan -no-color -input=false
      env:
        TF_VAR_project_id: ${{ matrix.projects.project_id }}
        TF_VAR_region: ${{ matrix.projects.region }}
        TF_VAR_compute_engine_service_account: ${{ secrets[matrix.projects.service_account_id_secret_name] }}

    - name: Inject speculative plan output as PR comment
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Configuration for Subscription: \`${{ matrix.subscription.name }}\`
          #### Terraform Initialization \`${{ steps.init.outcome }}\`
          #### Terraform Plan \`${{ steps.plan.outcome }}\`
          Please review the plan below for this deployment:
          <details><summary>Show Plan</summary>
          \`\`\`${ process.env.PLAN }
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.subscription.name }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
