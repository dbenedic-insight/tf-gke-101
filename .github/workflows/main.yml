name: main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: 0.12.28

jobs:
  gke:
    name: Terraform GKE Beta cluster infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: gke
    strategy:
      matrix:
        projects:
          - name: daveyb
            project_id: daveyb
            tfe_workspace_id: gcp-terraform-gke-beta
            tfe_api_uri: https://app.terraform.io
            region: us-east1
            network: default
            subnetwork: default
            istio: true 
            cloudrun: false
            service_account_id_secret_name: DAVEYB_SA
            service_account_credential_secret_name: DAVEYB_SA_CREDENTIALS

    steps:
    - uses: actions/checkout@v2

    - name: Configure ~/.terraformrc
      run: |
        tee ~/.terraformrc <<- EOF
        {
          "credentials": {
            "app.terraform.io": {
              "token": "${{ secrets.TFC_TOKEN }}"
            }
          }
        }
        EOF

    - name: Set TFC vars
      run: |
        chmod +x init-tfc-vars.sh
        ./init-tfc-vars.sh "${{ matrix.projects.tfe_api_uri }}/api/v2/workspaces/${{ matrix.projects.tfe_workspace_id }}/vars" ${{ secrets.TFC_TOKEN }}
      working-directory: gke/scripts 
      env:
        TF_VAR_project_id: ${{ matrix.projects.project_id }}
        TF_VAR_region: ${{ matrix.projects.region }}
        TF_VAR_cluster_name: "${{ matrix.projects.project_id }}-${{ matrix.projects.region }}-public-cluster"
        TF_VAR_compute_engine_service_account: ${{ secrets[matrix.projects.service_account_id_secret_name] }}
        TF_VAR_istio: ${{ matrix.projects.istio }}
        TF_VAR_cloudrun: ${{ matrix.projects.cloudrun }}
    
    - name: Push GOOGLE_CREDENTIALS to Workspace ${{ matrix.projects.tfe_workspace_id }} as secret
      run: |
        curl \
        --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
        --header "Content-Type: application/vns.api+json" \
        --request POST \
        --data '$(cat <<- EOF
        {
          "data": {
            "type":"vars",
            "attributes": {
              "key":"GOOGLE_CREDENTIALS",
              "value":"${{ secrets[matrix.projects.service_account_credential_secret_name] }}"
              "description":"",
              "category":"terraform",
              "hcl":false,
              "sensitive":true
            },
            "relationships": {
              "workspace": {
                "data": {
                  "id":"${{ matrix.projects.tfe_workspace_id }}",
                  "type":"workspaces"
                }
              }
            }
          }
        }
        EOF)' \
        ${{ matrix.projects.tfe_api_uri }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.1.0
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init ${{ matrix.projects.name }}
      id: init
      run: terraform init -no-color -input=false

    - name: Run speculative plan on TFC for ${{ matrix.projects.name }}
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false

    - name: Inject speculative plan output as PR comment for ${{ matrix.projects.name }}
      uses: actions/github-script@v2.0.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `## Terraform Configuration for Project \`${{ matrix.projects.name }}\`
          #### Terraform Initialization \`${{ steps.init.outcome }}\`
          #### Terraform Plan \`${{ steps.plan.outcome }}\`
          Please review the plan below for this deployment:

          <details><summary>Show Plan</summary>
          
          \`\`\`${ process.env.PLAN }
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply for ${{ matrix.projects.name }}
      if: github.event_name == 'push'
      id: apply
      run: terraform apply -auto-approve -no-color -input=false
